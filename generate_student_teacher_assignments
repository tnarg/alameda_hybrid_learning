#!/usr/bin/env python

#
# CONSTANTS
#

COHORT_UNASSIGNED = 0
COHORT_AM = 1
COHORT_PM = 2

#
# GLOBALS
#
am = 0 # global counter of number of AM students
pm = 0 # global counter of number of PM students

#
# IMPORTS
#
import csv
import itertools
import random

from hybridlearning import roomswap

#
# TYPES
#
class Student(object):
    def __init__(self, name, student_id, initial_teacher_name, teacher_affinity):
        self.name = name
        self.student_id = student_id
        self.initial_teacher_name = initial_teacher_name
        self.teacher_affinity = teacher_affinity

        self.cohort = COHORT_UNASSIGNED
        self.siblings = []

class Teacher(object):
    def __init__(self, name, grade, initial_room_number):
        self.name = name
        self.grade = grade
        self.initial_room_number = initial_room_number

        self.initial_student_count = 0
        self.student_limit = 0
        self.assigned_room = None
        self.am_students = []
        self.pm_students = []

class Room(object):
    def __init__(self, number, capacity):
        self.number = number
        self.capacity = capacity

#
# ALGORITHMS
#
def link_siblings(students, all_siblings):
    by_id = {}
    for student in students:
        by_id[student.student_id] = student

    for siblings in all_siblings:
        for (student_id_a, student_id_b) in itertools.combinations(siblings, 2):
            sibling_a = by_id[student_id_a]
            sibling_b = by_id[student_id_b]
            sibling_a.siblings.append(sibling_b)
            sibling_b.siblings.append(sibling_a)

def assign_teachers_to_rooms(students, teachers, rooms):
    if False:
        roomswap.assign_teachers_to_rooms(students, teachers, rooms)
    else:
        simple_assign_teachers_to_rooms(teachers, rooms)

def simple_assign_teachers_to_rooms(teachers, rooms):
    for teacher in teachers:
        for room in rooms:
            if room.number == teacher.initial_room_number:
                teacher.assigned_room = room
                break
        else:
            raise RuntimeError(repr(teacher.initial_room_number))

def assign_siblings_to_am_pm(students, alphabetic):
    global am
    global pm
    for student in students:
        # ignore students with no siblings
        if len(student.siblings) == 0:
            continue

        # skip students that have already been assigned to a cohort
        if student.cohort != COHORT_UNASSIGNED:
            continue

        if alphabetic:
            do_am = student.name.split(" ")[-1][0] < 'M'
        else:
            do_am = am <= pm

        if do_am:
            am += 1 + len(student.siblings)
            student.cohort = COHORT_AM
            for sibling in student.siblings:
                sibling.cohort = COHORT_AM
        else:
            pm += 1 + len(student.siblings)
            student.cohort = COHORT_PM
            for sibling in student.siblings:
                sibling.cohort = COHORT_PM

def assign_student(student, by_name, by_grade, alphabetic):
    global am
    global pm

    # initial teacher is the preferred candidate, other teachers
    # are sorted by how close to capacity they are.
    initial_teacher = by_name[student.initial_teacher_name]
    candidates = []
    if student.teacher_affinity == 0:
        for teacher in by_grade[initial_teacher.grade]:
            candidates.append(teacher)
        random.shuffle(candidates)
    else:
        for teacher in by_grade[initial_teacher.grade]:
            if teacher != initial_teacher:
                candidates.append(teacher)
        candidates.sort(key=lambda t: (t.student_limit * 2) - len(t.am_students) - len(t.pm_students), reverse=True)
        candidates.insert(0, initial_teacher)

    placed = False
    for candidate in candidates:
        if student.cohort == COHORT_AM:
            # Student MUST be in AM. try this teacher; otherwise, find
            # another teacher.
            if len(candidate.am_students) < candidate.assigned_room.capacity:
                candidate.am_students.append(student)
                placed = True
                break
        elif student.cohort == COHORT_PM:
            # Student MUST be in PM. try this teacher; otherwise, find
            # another teacher.
            if len(candidate.pm_students) < candidate.assigned_room.capacity:
                candidate.pm_students.append(student)
                placed = True
                break
        else:
            #
            # Check to see if this teacher is full
            #

            if alphabetic:
                try_am_first = student.name.split(" ")[-1][0] < 'M'
            else:
                try_am_first = len(candidate.am_students) <= len(candidate.pm_students)

            if try_am_first:
                if len(candidate.am_students) < candidate.assigned_room.capacity:
                    student.cohort = COHORT_AM
                    am += 1
                    candidate.am_students.append(student)
                    placed = True
                    break
                elif len(candidate.pm_students) < candidate.assigned_room.capacity:
                    student.cohort = COHORT_PM
                    pm += 1
                    candidate.pm_students.append(student)
                    placed = True
                    break
            else:
                if len(candidate.pm_students) < candidate.assigned_room.capacity:
                    student.cohort = COHORT_PM
                    pm += 1
                    candidate.pm_students.append(student)
                    placed = True
                    break
                elif len(candidate.am_students) < candidate.assigned_room.capacity:
                    student.cohort = COHORT_AM
                    am += 1
                    candidate.am_students.append(student)
                    placed = True
                    break

    if not placed:
        raise RuntimeError("Unable to place {} {}".format(student.name, student.cohort))

def assign_students_to_teachers(students, teachers, alphabetic):
    by_name = {}
    by_grade = {}
    for teacher in teachers:
        by_name[teacher.name] = teacher
        grade_level = by_grade.setdefault(teacher.grade, [])
        grade_level.append(teacher)

    random.seed(42) # Answer to the Ultimate Question of Life, the Universe, and Everything

    # group students by affinity
    affinity_tiers = [[], [], [], []]
    for student in students:
        affinity_tiers[student.teacher_affinity].append(student)

    affinity_tiers.reverse()
    for tier in affinity_tiers:
        random.shuffle(tier)

        # First we place students with an AM/PM COHORT
        for student in tier:
            if student.cohort != COHORT_UNASSIGNED:
                assign_student(student, by_name, by_grade, alphabetic)

        # Next we place the remainder of the students in the affinity tier
        for student in tier:
            if student.cohort == COHORT_UNASSIGNED:
                assign_student(student, by_name, by_grade, alphabetic)


#
# DATA LOADERS
#

def load_students():
    '''Loads a CSV of the form (student_id, name, teacher_name), and
    returns a list of Students.'''

    students = []
    with open('sample_data/students.csv', newline='') as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
        for row in reader:
            student_id = int(row[0])
            name = row[1]
            teacher_name = row[2]
            teacher_affinity = int(row[3])

            students.append(Student(name, student_id, teacher_name, teacher_affinity))
    return students

def load_siblings():
    '''Loads a CSV of the form (student_id, student_id, ...), and
    returns a list of lists of student_ids.'''

    siblings = []
    with open('sample_data/siblings.csv', newline='') as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
        for row in reader:
            siblings.append([int(student_id) for student_id in row])
    return siblings

def load_teachers():
    '''Loads a CSV of the form (grade, name, initial_room_number), and
    returns a list of Teachers.'''

    teachers = []
    with open('sample_data/teachers.csv', newline='') as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
        for row in reader:
            grade = int(row[0])
            name = row[1]
            room_number = row[2]
            teachers.append(Teacher(name, grade, room_number))
    return teachers

def load_rooms():
    '''Loads a CSV of the form (number, capacity), and
    returns a list of Rooms.'''

    rooms = []
    with open('sample_data/rooms.csv', newline='') as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
        for row in reader:
            number = row[0]
            capacity = int(row[1])
            rooms.append(Room(number, capacity))
    return rooms

#
# MAIN
#
if __name__ == "__main__":
    alphabetic = False

    students = load_students()
    siblings = load_siblings()
    teachers = load_teachers()
    rooms = load_rooms()

    link_siblings(students, siblings)
    assign_teachers_to_rooms(students, teachers, rooms)
    assign_siblings_to_am_pm(students, alphabetic)
    assign_students_to_teachers(students, teachers, alphabetic)

    for teacher in teachers:
        teacher.am_students.sort(key=lambda s: s.name)
        teacher.pm_students.sort(key=lambda s: s.name)
        if teacher.initial_room_number == teacher.assigned_room.number:
            print("\n{}: {}".format(teacher.grade, teacher.name))
        else:
            print("\n{}: {}: {}->{}".format(teacher.grade, teacher.name, teacher.initial_room_number, teacher.assigned_room.number))
        print("  AM:")
        for student in teacher.am_students:
            print("    ({}) {}".format(student.student_id, student.name))
        print("  PM:")
        for student in teacher.pm_students:
            print("    ({}) {}".format(student.student_id, student.name))
